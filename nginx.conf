# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        4;

events {
    worker_connections  1024;
}

error_log               /tmp/nginx-test-custom-counters-error.log warn;

http {
    default_type        application/octet-stream;
    sendfile            on;

    access_log          /tmp/nginx-test-custom-counters-access.log;

    counters_survive_reload on;

#    # uncomment next line on ghc ambiguous interface error
#    #haskell ghc_extra_flags '-hide-package regex-pcre';
#
#    haskell compile standalone /tmp/ngx_haskell.hs '
#
#import Data.ByteString.Base64
#import Data.Maybe
#import Text.Regex.PCRE
#
#hasVTag = either (const False) (isJust . matchOnce r) . decode
#    where r = makeRegex "\\\\bv=\\\\d+\\\\b" :: Regex
#
#NGX_EXPORT_B_Y (hasVTag)
#
#    ';

    server {
        listen          8010;
        server_name     main;
        counter_set_id  monitor;

        counter $cnt_all_requests inc;

        # prevent uninitialized variables warns
        set $inc_a_requests 0;
        set $inc_test0_requests 0;

        if ($arg_a) {
            set $inc_a_requests 1;
        }

        location / {
            return 200;
        }

        counter $cnt_a_requests inc $inc_a_requests;

        counter $cnt_test1_requests inc;
        counter $cnt_test2_requests inc;
        counter $cnt_test3_requests inc;

        location /test {
            counter $cnt_test_requests inc;
#            haskell_run hasVTag $hs_inc_cnt_vtag $cookie_misc;
#            counter $cnt_test_cookie_misc_vtag inc $hs_inc_cnt_vtag;
            if ($arg_a) {
                counter $cnt_test_a_requests inc;
                break;
            }
            if ($arg_b) {
                counter $cnt_test_b_requests inc;
                return 200;
            }
            echo "All requests before this: $cnt_all_requests";
        }

        location /test/rewrite {
            early_counter $ecnt_test_requests inc;
            rewrite ^ /test/0 last;
        }

        counter $cnt_test0_requests inc $inc_test0_requests;

        counter $cnt_test_bytes_sent inc $bytes_sent;

        location /test/0 {
            set $inc_test0_requests 1;
            rewrite ^ /test last;
        }
    }

    server {
        listen          8020;
        server_name     monitor;

        allow 127.0.0.1;
        deny  all;

        location / {
            echo -n "all = $cnt_all_requests";
            echo -n " | all?a = $cnt_a_requests";
            echo -n " | /test = $cnt_test_requests";
            echo -n " | /test?a = $cnt_test_a_requests";
            echo -n " | /test?b = $cnt_test_b_requests";
#            echo -n " | /test?misc:vtag = $cnt_test_cookie_misc_vtag";
#            echo -n " | /test/0 = $cnt_test0_requests";
            echo    " | /test/rewrite = $ecnt_test_requests";
        }

        location /bytes_sent {
            echo "bytes_sent = $cnt_test_bytes_sent";
        }

        location ~* ^/reset/a/(\d+)$ {
            set $set_a_requests $1;
            counter $cnt_a_requests set $set_a_requests;
            counter $cnt_test_a_requests set $set_a_requests;
            return 200;
        }
    }
}

# vim: ft=nginx
